using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using TlsCertificateLoader.Extensions;

namespace TlsCertificateLoader
{
    /// <summary>
    /// Represents a loader that allows one to generate and refresh a full chain <see cref="System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/> and <see cref="System.Net.Security.SslStreamCertificateContext"/> for use with Kestrel.
    /// </summary>
    public sealed class TlsCertificateLoader
    {
        /// <inheritdoc cref="System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/>
        public X509Certificate2Collection X509Certificate2Collection { get; private set; }
        internal SslStreamCertificateContext SslStreamCertificateContext { get; set; }
        private string _fullChainPemFilePath;
        private string _privateKeyPemFilePath;

        /// <summary>
        /// Constructor for <see cref="TlsCertificateLoader"/>
        /// </summary>
        /// <param name="fullChainPemFilePath">The full path to the full chain .pem file (e.g. the fullchain.pem generated by Certbot)</param>
        /// <param name="privateKeyPemFilePath">The full path to the private key .pem file (e.g. the privkey.pem generated by Certbot)</param>
        public TlsCertificateLoader(string fullChainPemFilePath, string privateKeyPemFilePath)
        {
            RefreshCertificates(fullChainPemFilePath, privateKeyPemFilePath);
        }

        /// <summary>
        /// Refresh the certificate collection using different paths than previously provided.
        /// </summary>
        /// <param name="fullChainPemFilePath">The full path to the full chain .pem file (e.g. the fullchain.pem generated by Certbot)</param>
        /// <param name="privateKeyPemFilePath">The full path to the private key .pem file (e.g. the privkey.pem generated by Certbot)</param>
        public void RefreshCertificates(string fullChainPemFilePath, string privateKeyPemFilePath)
        {
            _fullChainPemFilePath = fullChainPemFilePath;
            _privateKeyPemFilePath = privateKeyPemFilePath;
            RefreshCertificates();
        }

        /// <summary>
        /// Refresh the certificate collection using the same full file paths previously provided.
        /// </summary>
        public void RefreshCertificates()
        {
            X509Certificate2Collection = X509Certificate2Collection.ImportFullChainFromPemFiles(_fullChainPemFilePath, _privateKeyPemFilePath);
            SslStreamCertificateContext = SslStreamCertificateContext.Create(X509Certificate2Collection[0], X509Certificate2Collection, offline: true);
        }
    }
}
