using System;
using System.Collections.Generic;
using TlsCertificateLoader.Models;

namespace TlsCertificateLoader
{
    /// <summary>
    /// Represents a loader that allows one to generate and refresh a full chain <see cref="System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/> and <see cref="System.Net.Security.SslStreamCertificateContext"/> for use with Kestrel.
    /// </summary>
    public sealed class TlsCertificateLoader
    {
        private CertificateHolder _defaultCertificateHolder;
        private Dictionary<string, CertificateHolder> _additionalCertificateHolders;

        /// <summary>
        /// Constructor for <see cref="TlsCertificateLoader"/>
        /// </summary>
        /// <param name="defaultFullChainPemFilePath">The full path to the default full chain .pem file (e.g. the fullchain.pem generated by Certbot)</param>
        /// <param name="defaultFrivateKeyPemFilePath">The full path to the default private key .pem file (e.g. the privkey.pem generated by Certbot)</param>
        public TlsCertificateLoader(string defaultFullChainPemFilePath, string defaultFrivateKeyPemFilePath)
        {
            RefreshDefaultCertificates(defaultFullChainPemFilePath, defaultFrivateKeyPemFilePath);
        }

        /// <summary>
        /// Refresh the default certificate collection using different paths than previously provided.
        /// </summary>
        /// <param name="defaultFullChainPemFilePath">The full path to the default full chain .pem file (e.g. the fullchain.pem generated by Certbot)</param>
        /// <param name="defaultFrivateKeyPemFilePath">The full path to the default private key .pem file (e.g. the privkey.pem generated by Certbot)</param>
        public void RefreshDefaultCertificates(string defaultFullChainPemFilePath, string defaultFrivateKeyPemFilePath)
        {
            _defaultCertificateHolder = new(defaultFullChainPemFilePath, defaultFrivateKeyPemFilePath);
        }

        /// <summary>
        /// Refresh the default certificate collection using the same full file paths previously provided.
        /// </summary>
        public void RefreshDefaultCertificates()
        {
            _defaultCertificateHolder.RefreshCertificates();
        }

        /// <summary>
        /// Add additional certificate collections matched by hostname
        /// </summary>
        /// <param name="hostname">The hostname for which the certificate collection will be used</param>
        /// <param name="fullChainPemFilePath">The full path to the full chain .pem file (e.g. the fullchain.pem generated by Certbot)</param>
        /// <param name="privateKeyPemFilePath">The full path to the private key .pem file (e.g. the privkey.pem generated by Certbot)</param>
        public void AddAdditionalCertificates(string hostname, string fullChainPemFilePath, string privateKeyPemFilePath)
        {
            if (_additionalCertificateHolders == null)
            {
                _additionalCertificateHolders = new(StringComparer.OrdinalIgnoreCase);
            }

            _additionalCertificateHolders.Add(hostname, new(fullChainPemFilePath, privateKeyPemFilePath));
        }

        /// <summary>
        /// Remove an additional certificate collection
        /// </summary>
        /// <param name="hostname">The hostname for which the certificate collection was added</param>
        public void RemoveAdditionalCertificates(string hostname)
        {
            _additionalCertificateHolders.Remove(hostname);
        }

        /// <summary>
        /// Refreshes an additional certificate collection using different paths than previously provided.
        /// </summary>
        /// <param name="hostname">The hostname for which the certificate collection was added</param>
        /// <param name="fullChainPemFilePath">The full path to the full chain .pem file (e.g. the fullchain.pem generated by Certbot)</param>
        /// <param name="privateKeyPemFilePath">The full path to the private key .pem file (e.g. the privkey.pem generated by Certbot)</param>
        public void RefreshAdditionalCertificates(string hostname, string fullChainPemFilePath, string privateKeyPemFilePath)
        {
            var certificateHolder = _additionalCertificateHolders[hostname];
            certificateHolder.FullChainPemFilePath = fullChainPemFilePath;
            certificateHolder.PrivateKeyPemFilePath = privateKeyPemFilePath;
            certificateHolder.RefreshCertificates();
        }

        /// <summary>
        /// Refreshes an additional certificate collection
        /// </summary>
        /// <param name="hostname">The hostname for which the certificate collection was added</param>
        public void RefreshAdditionalCertificates(string hostname)
        {
            _additionalCertificateHolders[hostname].RefreshCertificates();
        }

        internal CertificateHolder GetCertificateHolder(string hostname)
        {
            if (_additionalCertificateHolders != null && _additionalCertificateHolders.TryGetValue(hostname, out var certificateHolder))
            {
                return certificateHolder;
            }

            return _defaultCertificateHolder;
        }
    }
}
